// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: api/v1/grpc/sensorsphere.proto

package sensorsphere_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SensorSphereServiceClient is the client API for SensorSphereService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SensorSphereServiceClient interface {
	CreateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensor, error)
	GetSensor(ctx context.Context, in *GetSensorRequest, opts ...grpc.CallOption) (*Sensor, error)
	UpdateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*UpdateSensorResponse, error)
	GetNearestSensor(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Sensor, error)
	CreateSensorReading(ctx context.Context, in *SensorReading, opts ...grpc.CallOption) (*SensorReading, error)
	GetSensorReadingsForTimeRange(ctx context.Context, in *TimeRangeQuery, opts ...grpc.CallOption) (*SensorReadingsResponse, error)
}

type sensorSphereServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSensorSphereServiceClient(cc grpc.ClientConnInterface) SensorSphereServiceClient {
	return &sensorSphereServiceClient{cc}
}

func (c *sensorSphereServiceClient) CreateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := c.cc.Invoke(ctx, "/sensorsphere.v1.SensorSphereService/CreateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSphereServiceClient) GetSensor(ctx context.Context, in *GetSensorRequest, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := c.cc.Invoke(ctx, "/sensorsphere.v1.SensorSphereService/GetSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSphereServiceClient) UpdateSensor(ctx context.Context, in *Sensor, opts ...grpc.CallOption) (*UpdateSensorResponse, error) {
	out := new(UpdateSensorResponse)
	err := c.cc.Invoke(ctx, "/sensorsphere.v1.SensorSphereService/UpdateSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSphereServiceClient) GetNearestSensor(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Sensor, error) {
	out := new(Sensor)
	err := c.cc.Invoke(ctx, "/sensorsphere.v1.SensorSphereService/GetNearestSensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSphereServiceClient) CreateSensorReading(ctx context.Context, in *SensorReading, opts ...grpc.CallOption) (*SensorReading, error) {
	out := new(SensorReading)
	err := c.cc.Invoke(ctx, "/sensorsphere.v1.SensorSphereService/CreateSensorReading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorSphereServiceClient) GetSensorReadingsForTimeRange(ctx context.Context, in *TimeRangeQuery, opts ...grpc.CallOption) (*SensorReadingsResponse, error) {
	out := new(SensorReadingsResponse)
	err := c.cc.Invoke(ctx, "/sensorsphere.v1.SensorSphereService/GetSensorReadingsForTimeRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SensorSphereServiceServer is the server API for SensorSphereService service.
// All implementations must embed UnimplementedSensorSphereServiceServer
// for forward compatibility
type SensorSphereServiceServer interface {
	CreateSensor(context.Context, *Sensor) (*Sensor, error)
	GetSensor(context.Context, *GetSensorRequest) (*Sensor, error)
	UpdateSensor(context.Context, *Sensor) (*UpdateSensorResponse, error)
	GetNearestSensor(context.Context, *Location) (*Sensor, error)
	CreateSensorReading(context.Context, *SensorReading) (*SensorReading, error)
	GetSensorReadingsForTimeRange(context.Context, *TimeRangeQuery) (*SensorReadingsResponse, error)
	mustEmbedUnimplementedSensorSphereServiceServer()
}

// UnimplementedSensorSphereServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSensorSphereServiceServer struct {
}

func (UnimplementedSensorSphereServiceServer) CreateSensor(context.Context, *Sensor) (*Sensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensor not implemented")
}
func (UnimplementedSensorSphereServiceServer) GetSensor(context.Context, *GetSensorRequest) (*Sensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensor not implemented")
}
func (UnimplementedSensorSphereServiceServer) UpdateSensor(context.Context, *Sensor) (*UpdateSensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSensor not implemented")
}
func (UnimplementedSensorSphereServiceServer) GetNearestSensor(context.Context, *Location) (*Sensor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNearestSensor not implemented")
}
func (UnimplementedSensorSphereServiceServer) CreateSensorReading(context.Context, *SensorReading) (*SensorReading, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSensorReading not implemented")
}
func (UnimplementedSensorSphereServiceServer) GetSensorReadingsForTimeRange(context.Context, *TimeRangeQuery) (*SensorReadingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSensorReadingsForTimeRange not implemented")
}
func (UnimplementedSensorSphereServiceServer) mustEmbedUnimplementedSensorSphereServiceServer() {}

// UnsafeSensorSphereServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SensorSphereServiceServer will
// result in compilation errors.
type UnsafeSensorSphereServiceServer interface {
	mustEmbedUnimplementedSensorSphereServiceServer()
}

func RegisterSensorSphereServiceServer(s grpc.ServiceRegistrar, srv SensorSphereServiceServer) {
	s.RegisterService(&SensorSphereService_ServiceDesc, srv)
}

func _SensorSphereService_CreateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSphereServiceServer).CreateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensorsphere.v1.SensorSphereService/CreateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSphereServiceServer).CreateSensor(ctx, req.(*Sensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSphereService_GetSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSphereServiceServer).GetSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensorsphere.v1.SensorSphereService/GetSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSphereServiceServer).GetSensor(ctx, req.(*GetSensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSphereService_UpdateSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sensor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSphereServiceServer).UpdateSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensorsphere.v1.SensorSphereService/UpdateSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSphereServiceServer).UpdateSensor(ctx, req.(*Sensor))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSphereService_GetNearestSensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSphereServiceServer).GetNearestSensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensorsphere.v1.SensorSphereService/GetNearestSensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSphereServiceServer).GetNearestSensor(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSphereService_CreateSensorReading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SensorReading)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSphereServiceServer).CreateSensorReading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensorsphere.v1.SensorSphereService/CreateSensorReading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSphereServiceServer).CreateSensorReading(ctx, req.(*SensorReading))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorSphereService_GetSensorReadingsForTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeRangeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorSphereServiceServer).GetSensorReadingsForTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensorsphere.v1.SensorSphereService/GetSensorReadingsForTimeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorSphereServiceServer).GetSensorReadingsForTimeRange(ctx, req.(*TimeRangeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// SensorSphereService_ServiceDesc is the grpc.ServiceDesc for SensorSphereService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SensorSphereService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sensorsphere.v1.SensorSphereService",
	HandlerType: (*SensorSphereServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSensor",
			Handler:    _SensorSphereService_CreateSensor_Handler,
		},
		{
			MethodName: "GetSensor",
			Handler:    _SensorSphereService_GetSensor_Handler,
		},
		{
			MethodName: "UpdateSensor",
			Handler:    _SensorSphereService_UpdateSensor_Handler,
		},
		{
			MethodName: "GetNearestSensor",
			Handler:    _SensorSphereService_GetNearestSensor_Handler,
		},
		{
			MethodName: "CreateSensorReading",
			Handler:    _SensorSphereService_CreateSensorReading_Handler,
		},
		{
			MethodName: "GetSensorReadingsForTimeRange",
			Handler:    _SensorSphereService_GetSensorReadingsForTimeRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/grpc/sensorsphere.proto",
}
